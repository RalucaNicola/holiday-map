var E=Object.defineProperty;var C=Object.getOwnPropertySymbols;var F=Object.prototype.hasOwnProperty,W=Object.prototype.propertyIsEnumerable;var M=(i,t,e)=>t in i?E(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e,m=(i,t)=>{for(var e in t||(t={}))F.call(t,e)&&M(i,e,t[e]);if(C)for(var e of C(t))W.call(t,e)&&M(i,e,t[e]);return i};import{dq as _,cK as z,ae as G,U as K,cU as D,bL as H,dD as N,r as V,w as j,dt as B,du as L,b4 as U,dE as J,dF as $,dG as O,dH as Q,an as p,a as d,n as X}from"./vendor.c414a8c9.js";import{b,g as Y,d as Z}from"./kmlUtils.2aa0b7ce.js";import{v as ii}from"./Bitmap.95cbe132.js";import{t as ti}from"./BitmapContainer.c9ff86ec.js";import{f as ei,u as si}from"./LayerView.da2fde64.js";import{i as f}from"./GraphicContainer.44d07083.js";import{a as v}from"./BaseGraphicContainer.1378f3d2.js";import"./utils.26cfa974.js";import"./Utils.d29fb889.js";import"./enums.6e42a319.js";import"./enums.de935fa5.js";import"./Texture.21608732.js";import"./VertexElementDescriptor.d386088d.js";import"./MaterialKey.003e1aef.js";import"./WGLContainer.400ca512.js";import"./pixelUtils.8244b2be.js";import"./VertexArrayObject.6089921b.js";import"./ProgramTemplate.443da894.js";import"./StyleDefinition.627ffe6c.js";import"./config.40d47db8.js";import"./GeometryUtils.8166011b.js";import"./earcut.d30cbec0.js";import"./CIMSymbolHelper.cef2d21f.js";import"./BidiEngine.ec67919b.js";import"./GeometryUtils.814cb798.js";import"./normalizeUtilsSync.8b6bc9a0.js";import"./projectionSupport.441f613a.js";import"./json.d1a0fa35.js";import"./FeatureContainer.cde7992c.js";import"./TileContainer.985039f3.js";import"./visualVariablesUtils.65951d45.js";import"./visualVariablesUtils.f6ff214d.js";import"./Matcher.9dc9529f.js";import"./tileUtils.4ce20f65.js";import"./TileClipper.139cac50.js";import"./Geometry.b68345ae.js";import"./ExpandedCIM.13be576b.js";import"./quantizationUtils.2450b4c7.js";import"./devEnvironmentUtils.8c6e6b72.js";import"./schemaUtils.48f0e3c8.js";import"./createSymbolSchema.7c9fbeea.js";import"./MD5.97b39efc.js";import"./util.dfab6411.js";import"./ComputedAttributeStorage.1471d426.js";import"./centroid.0a864aab.js";import"./vec3f32.8d37ecf5.js";class T{constructor(){this.allSublayers=new Map,this.allPoints=[],this.allPolylines=[],this.allPolygons=[],this.allMapImages=[]}}let n=class extends ei(si){constructor(){super(...arguments),this._bitmapIndex=new Map,this._mapImageContainer=new ti,this._kmlVisualData=new T,this.allVisiblePoints=new _,this.allVisiblePolylines=new _,this.allVisiblePolygons=new _,this.allVisibleMapImages=new z}async hitTest(i,t){var l,s,a;const e=this.layer;return[(l=this._pointsView)==null?void 0:l.hitTest(i),(s=this._polylinesView)==null?void 0:s.hitTest(i),(a=this._polygonsView)==null?void 0:a.hitTest(i)].flat().filter(Boolean).map(r=>(r.layer=e,r.sourceLayer=e,{type:"graphic",graphic:r,layer:e,mapPoint:i}))}update(i){this._polygonsView&&this._polygonsView.processUpdate(i),this._polylinesView&&this._polylinesView.processUpdate(i),this._pointsView&&this._pointsView.processUpdate(i)}attach(){this._fetchController=new AbortController,this.container.addChild(this._mapImageContainer),this._polygonsView=new v({view:this.view,graphics:this.allVisiblePolygons,requestUpdateCallback:()=>this.requestUpdate(),container:new f(this.view.featuresTilingScheme)}),this.container.addChild(this._polygonsView.container),this._polylinesView=new v({view:this.view,graphics:this.allVisiblePolylines,requestUpdateCallback:()=>this.requestUpdate(),container:new f(this.view.featuresTilingScheme)}),this.container.addChild(this._polylinesView.container),this._pointsView=new v({view:this.view,graphics:this.allVisiblePoints,requestUpdateCallback:()=>this.requestUpdate(),container:new f(this.view.featuresTilingScheme)}),this.container.addChild(this._pointsView.container),this.handles.add([this.allVisibleMapImages.on("change",i=>{i.added.forEach(t=>this._addMapImage(t)),i.removed.forEach(t=>this._removeMapImage(t))}),G(()=>this.layer.visibleSublayers,i=>{for(const[t,e]of this._kmlVisualData.allSublayers)e.visibility=0;for(const t of i){const e=this._kmlVisualData.allSublayers.get(t.id);e&&(e.visibility=1)}this._refreshCollections()})]),this.updatingHandles.addPromise(this._fetchService(this._fetchController.signal))}detach(){this._fetchController.abort(),this._fetchController=null,this._mapImageContainer.removeAllChildren(),this.container.removeAllChildren(),this._bitmapIndex.clear(),this._polygonsView&&(this._polygonsView.destroy(),this._polygonsView=null),this._polylinesView&&(this._polylinesView.destroy(),this._polylinesView=null),this._pointsView&&(this._pointsView.destroy(),this._pointsView=null)}moveStart(){}viewChange(){this._polygonsView.viewChange(),this._polylinesView.viewChange(),this._pointsView.viewChange()}moveEnd(){}isUpdating(){return this._pointsView.updating||this._polygonsView.updating||this._polylinesView.updating}_addMapImage(i){(this.view.spatialReference.isWGS84||this.view.spatialReference.isWebMercator)&&K(i.href,{responseType:"image"}).then(({data:t})=>{let e=D.fromJSON(i.extent);H(e,this.view.spatialReference)&&(e=N(e,this.view.spatialReference));const l=new ii(t,"standard");l.x=e.xmin,l.y=e.ymax,l.resolution=e.width/t.naturalWidth,l.rotation=i.rotation,this._mapImageContainer.addChild(l),this._bitmapIndex.set(i,l)})}async _getViewDependentUrl(i,t){const{viewFormat:e,viewBoundScale:l,httpQuery:s}=i;if(V(e)){if(j(t))throw new Error("Loading this network link requires a view state.");let a;if(await B(),V(l)&&l!==1){const h=new D(t.extent);h.expand(l),a=h}else a=t.extent;a=L(a,U.WGS84);const r=L(a,U.WebMercator),y=a.xmin,c=a.xmax,o=a.ymin,A=a.ymax,q=t.size[0]*t.pixelRatio,R=t.size[1]*t.pixelRatio,S=Math.max(r.width,r.height),I={"[bboxWest]":y.toString(),"[bboxEast]":c.toString(),"[bboxSouth]":o.toString(),"[bboxNorth]":A.toString(),"[lookatLon]":a.center.x.toString(),"[lookatLat]":a.center.y.toString(),"[lookatRange]":S.toString(),"[lookatTilt]":"0","[lookatHeading]":t.rotation.toString(),"[lookatTerrainLon]":a.center.x.toString(),"[lookatTerrainLat]":a.center.y.toString(),"[lookatTerrainAlt]":"0","[cameraLon]":a.center.x.toString(),"[cameraLat]":a.center.y.toString(),"[cameraAlt]":S.toString(),"[horizFov]":"60","[vertFov]":"60","[horizPixels]":q.toString(),"[vertPixels]":R.toString(),"[terrainEnabled]":"0","[clientVersion]":J,"[kmlVersion]":"2.2","[clientName]":"ArcGIS API for JavaScript","[language]":"en-US"},x=h=>{for(const P in h)for(const k in I)h[P]=h[P].replace(k,I[k])},w=$(e);x(w);let g={};V(s)&&(g=$(s),x(g));const u=O(i.href);return u.query=m(m(m({},u.query),w),g),`${u.path}?${Q(w)}`}return i.href}async _fetchService(i){const t=new T;await this._loadVisualData(this.layer.url,t,i),this._kmlVisualData=t,this._refreshCollections()}_refreshCollections(){this.allVisiblePoints.removeAll(),this.allVisiblePolylines.removeAll(),this.allVisiblePolygons.removeAll(),this.allVisibleMapImages.removeAll(),this.allVisiblePoints.addMany(this._kmlVisualData.allPoints.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolylines.addMany(this._kmlVisualData.allPolylines.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisiblePolygons.addMany(this._kmlVisualData.allPolygons.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i)),this.allVisibleMapImages.addMany(this._kmlVisualData.allMapImages.filter(i=>this._isSublayerVisible(i.sublayerId)).map(({item:i})=>i))}_isSublayerVisible(i){const t=this._kmlVisualData.allSublayers.get(i);return!!t.visibility&&(t.parentFolderId===-1||this._isSublayerVisible(t.parentFolderId))}_loadVisualData(i,t,e){return this._fetchParsedKML(i,e).then(async l=>{for(const s of l.sublayers){t.allSublayers.set(s.id,s);const a=s.points?await b(s.points):[],r=s.polylines?await b(s.polylines):[],y=s.polygons?await b(s.polygons):[],c=s.mapImages||[];if(t.allPoints.push(...a.map(o=>({item:o,sublayerId:s.id}))),t.allPolylines.push(...r.map(o=>({item:o,sublayerId:s.id}))),t.allPolygons.push(...y.map(o=>({item:o,sublayerId:s.id}))),t.allMapImages.push(...c.map(o=>({item:o,sublayerId:s.id}))),s.networkLink){const o=await this._getViewDependentUrl(s.networkLink,this.view.state);await this._loadVisualData(o,t,e)}}})}_fetchParsedKML(i,t){return Y(i,this.view.spatialReference,this.layer.refreshInterval,t).then(e=>Z(e.data))}_removeMapImage(i){const t=this._bitmapIndex.get(i);t&&(this._mapImageContainer.removeChild(t),this._bitmapIndex.delete(i))}};p([d()],n.prototype,"_pointsView",void 0),p([d()],n.prototype,"_polylinesView",void 0),p([d()],n.prototype,"_polygonsView",void 0),p([d()],n.prototype,"updating",void 0),n=p([X("esri.views.2d.layers.KMLLayerView2D")],n);const Xi=n;export{Xi as default};
