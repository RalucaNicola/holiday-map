import{r as h,cP as u,cK as f,ae as o,af as p,cX as w,w as y,an as _,n as V}from"./vendor.c414a8c9.js";import{f as v,u as C}from"./LayerView.da2fde64.js";import{i as g}from"./GraphicContainer.44d07083.js";import{a as d}from"./BaseGraphicContainer.1378f3d2.js";import"./utils.26cfa974.js";import"./Utils.d29fb889.js";import"./enums.6e42a319.js";import"./enums.de935fa5.js";import"./Texture.21608732.js";import"./VertexElementDescriptor.d386088d.js";import"./MaterialKey.003e1aef.js";import"./CIMSymbolHelper.cef2d21f.js";import"./BidiEngine.ec67919b.js";import"./GeometryUtils.814cb798.js";import"./normalizeUtilsSync.8b6bc9a0.js";import"./projectionSupport.441f613a.js";import"./json.d1a0fa35.js";import"./VertexArrayObject.6089921b.js";import"./FeatureContainer.cde7992c.js";import"./TileContainer.985039f3.js";import"./WGLContainer.400ca512.js";import"./pixelUtils.8244b2be.js";import"./ProgramTemplate.443da894.js";import"./StyleDefinition.627ffe6c.js";import"./config.40d47db8.js";import"./GeometryUtils.8166011b.js";import"./earcut.d30cbec0.js";import"./visualVariablesUtils.65951d45.js";import"./visualVariablesUtils.f6ff214d.js";import"./Matcher.9dc9529f.js";import"./tileUtils.4ce20f65.js";import"./TileClipper.139cac50.js";import"./Geometry.b68345ae.js";import"./ExpandedCIM.13be576b.js";import"./quantizationUtils.2450b4c7.js";import"./devEnvironmentUtils.8c6e6b72.js";import"./schemaUtils.48f0e3c8.js";import"./createSymbolSchema.7c9fbeea.js";import"./MD5.97b39efc.js";import"./util.dfab6411.js";import"./ComputedAttributeStorage.1471d426.js";import"./centroid.0a864aab.js";import"./vec3f32.8d37ecf5.js";const m="sublayers",l="layerView",b=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends v(C){constructor(){super(...arguments),this._highlightIds=new Map}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){h(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():h(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const r=e.hitTest(i);if(h(this._graphicsViewsFeatureCollectionMap)){const a=this._graphicsViewsFeatureCollectionMap.get(e);for(const s of r)!s.popupTemplate&&a.popupTemplate&&(s.popupTemplate=a.popupTemplate)}return r}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof u?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):f.isCollection(i)&&(t=i.map(e=>e&&e.uid).toArray()),t=t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>{this._removeHighlight(t)}}):b}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(h(e)&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const r of e){const a=new g(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const s=new d({view:i,graphics:r.source,renderer:r.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(s,r),this.container.addChild(s.container),this.handles.add([o(()=>r.visible,n=>s.container.visible=n,p),o(()=>s.updating,()=>this.notifyChange("updating"),p)],l)}this._updateHighlight()}else h(this.layer.sublayers)&&this.handles.add(w(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),m)}detach(){this._destroyGraphicsViews(),this.handles.remove(m)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(l);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),y(this.layer.sublayers))return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const r of this.layer.sublayers){const a=new g(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const s=new d({view:t,graphics:r.graphics,requestUpdateCallback:e,container:a});this.handles.add([r.on("graphic-update",s.graphicUpdateHandler),o(()=>r.visible,n=>s.container.visible=n,p),o(()=>s.updating,()=>this.notifyChange("updating"),p)],l),this.container.addChild(s.container),i.push(s)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};c=_([V("esri.views.2d.layers.MapNotesLayerView2D")],c);const di=c;export{di as default};
